{"version":3,"sources":["components/avaSteps.tsx","components/AvaMain.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Step1","handleChange","value","inputSpring","useSpring","config","molasses","delay","width","opacity","from","buttonSpring","input","type","className","name","style","onChange","e","required","Step2","handleStage","autoFocus","pattern","title","onClick","Step3","height","textarea","avaMemory","setShow","useState","stage","setStage","email","message","formState","setFormState","typedInstance","useRef","containerSpring","setContainerSpring","resetTyped","typedRef","current","typed","reset","useEffect","smoothUnmount","gentle","onRest","target","newFormState","modifier","nextStage","Math","sign","div","ref","strings","typeSpeed","cursorChar","action","onSubmit","isFormFilled","preventDefault","setTimeout","handleSubmit","App","showContact","setShowContact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.8eae63ff.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { useSpring, animated, config } from 'react-spring';\n\ninterface stepProps {\n  handleChange: (\n    e:\n      | React.ChangeEvent<HTMLInputElement>\n      | React.ChangeEvent<HTMLTextAreaElement>\n  ) => void;\n  value: string;\n  handleStage: (nextStage: number) => void;\n}\n\nexport const Step1: FunctionComponent<stepProps> = ({\n  handleChange,\n  value,\n}) => {\n  const inputSpring = useSpring({\n    config: config.molasses,\n    delay: 300,\n    width: '18em',\n    opacity: 1,\n    from: { width: '1em', opacity: 0 },\n  });\n  const buttonSpring = useSpring({\n    config: config.molasses,\n    delay: 500,\n    opacity: 1,\n    from: { opacity: 0 },\n  });\n\n  return (\n    <>\n      <animated.input\n        type=\"text\"\n        className=\"input-box\"\n        name=\"name\"\n        style={inputSpring}\n        value={value}\n        onChange={(e) => handleChange(e)}\n        required\n      />\n      <div className=\"ava-btn-wrapper\">\n        <animated.input\n          type=\"submit\"\n          className=\"ava-confirm-btn btn\"\n          style={buttonSpring}\n          value=\"next\"\n        />\n      </div>\n    </>\n  );\n};\n\nexport const Step2: FunctionComponent<stepProps> = ({\n  handleChange,\n  value,\n  handleStage,\n}) => {\n  const inputSpring = useSpring({\n    config: config.molasses,\n    width: '18em',\n    opacity: 1,\n    from: { width: '1em', opacity: 0 },\n  });\n  const buttonSpring = useSpring({\n    config: config.molasses,\n    opacity: 1,\n    from: { opacity: 0 },\n  });\n\n  return (\n    <>\n      <animated.input\n        type=\"text\"\n        className=\"input-box\"\n        name=\"email\"\n        style={inputSpring}\n        value={value}\n        onChange={(e) => handleChange(e)}\n        required\n        autoFocus\n        pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\n        title=\"email@domain.something\"\n      />\n      <div className=\"ava-btn-wrapper\">\n        <animated.input\n          type=\"button\"\n          className=\"ava-back-btn btn\"\n          style={buttonSpring}\n          onClick={() => handleStage(-1)}\n          value=\"back\"\n        />\n        <animated.input\n          type=\"submit\"\n          className=\"ava-confirm-btn btn\"\n          style={buttonSpring}\n          value=\"next\"\n        />\n      </div>\n    </>\n  );\n};\n\nexport const Step3: FunctionComponent<stepProps> = ({\n  handleChange,\n  value,\n  handleStage,\n}) => {\n  const inputSpring = useSpring({\n    config: config.molasses,\n    width: '80vmin',\n    height: '60vmin',\n    opacity: 1,\n    from: { width: '1vmin', opacity: 0 },\n  });\n  const buttonSpring = useSpring({\n    config: config.molasses,\n    opacity: 1,\n    from: { opacity: 0 },\n  });\n\n  return (\n    <>\n      <animated.textarea\n        className=\"input-box\"\n        name=\"message\"\n        style={inputSpring}\n        value={value}\n        onChange={(e) => handleChange(e)}\n        autoFocus\n        required\n      />\n      <div className=\"ava-btn-wrapper\">\n        <animated.input\n          type=\"button\"\n          className=\"ava-back-btn btn\"\n          style={buttonSpring}\n          onClick={() => handleStage(-1)}\n          value=\"back\"\n        />\n        <animated.input\n          type=\"submit\"\n          className=\"ava-confirm-btn btn\"\n          style={buttonSpring}\n          value=\"submit\"\n        />\n      </div>\n    </>\n  );\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport Typed from 'react-typed';\nimport { useSpring, animated, config } from 'react-spring';\nimport { Step1, Step2, Step3 } from './avaSteps';\n\nconst avaMemory: Array<string[]> = [\n  [\n    'Hello, my name is Ava.',\n    'I will help you send your message.',\n    'What is your name?',\n  ],\n  ['What is your email?'],\n  ['Type your message below'],\n  ['Sending your message...'],\n  ['Your message was sent, Thank you.'],\n];\n\ninterface props {\n  setShow: (toShow: boolean) => void;\n}\n\nexport default ({ setShow }: props) => {\n  const [stage, setStage] = useState(1);\n  const [formState, setFormState] = useState({\n    name: '',\n    email: '',\n    message: '',\n  });\n\n  const typedInstance = useRef(null);\n\n  const [containerSpring, setContainerSpring] = useSpring(() => ({\n    config: config.molasses,\n    opacity: 0,\n    width: '1%',\n    height: '1vh',\n  }));\n\n  const resetTyped = () => {\n    const typedRef: any = typedInstance.current;\n    if (typedRef) typedRef.typed.reset();\n  };\n\n  useEffect(() => {\n    setContainerSpring({ opacity: 1, width: '100%', height: '100vh' });\n  });\n\n  const smoothUnmount = () => {\n    setContainerSpring({\n      config: config.gentle,\n      opacity: 0,\n      width: '10%',\n      height: '10vh',\n      onRest: () => setShow(false),\n    });\n  };\n\n  const handleChange = (\n    e:\n      | React.ChangeEvent<HTMLInputElement>\n      | React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    const newFormState = { ...formState, [name]: value };\n    setFormState(newFormState);\n  };\n\n  const handleStage = (modifier: number) => {\n    const nextStage = stage + Math.sign(modifier);\n    setStage(nextStage);\n    resetTyped();\n  };\n\n  const handleSubmit = (e: React.SyntheticEvent) => {\n    const isFormFilled = stage === 3;\n    e.preventDefault();\n    handleStage(1);\n\n    if (isFormFilled) {\n      // post form here, mock bellow\n      setTimeout(() => {\n        setStage(5);\n        resetTyped();\n      }, 4000);\n    }\n  };\n\n  return (\n    <animated.div className=\"ava-container\" style={containerSpring}>\n      <input\n        type=\"button\"\n        className=\"btn ava-close-btn\"\n        value=\"x\"\n        onClick={() => smoothUnmount()}\n      />\n      <span className=\"ava-output\">\n        <Typed\n          ref={typedInstance}\n          strings={avaMemory[stage - 1]}\n          typeSpeed={70}\n          cursorChar={'<'}\n        />\n      </span>\n      <form\n        action=\"#\"\n        className=\"contact-me-form\"\n        onSubmit={(e) => handleSubmit(e)}\n      >\n        {stage === 1 && (\n          <Step1\n            handleChange={handleChange}\n            value={formState.name}\n            handleStage={handleStage}\n          />\n        )}\n        {stage === 2 && (\n          <Step2\n            handleChange={handleChange}\n            value={formState.email}\n            handleStage={handleStage}\n          />\n        )}\n        {stage === 3 && (\n          <Step3\n            handleChange={handleChange}\n            value={formState.message}\n            handleStage={handleStage}\n          />\n        )}\n        {stage === 5 && (\n          <input\n            type=\"button\"\n            className=\"btn ava-confirm-btn\"\n            value=\"ok\"\n            onClick={() => smoothUnmount()}\n          />\n        )}\n      </form>\n    </animated.div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport Ava from './components/AvaMain';\n\nfunction App() {\n  const [showContact, setShowContact] = useState(false);\n\n  return (\n    <div className=\"App\">\n      {showContact && <Ava setShow={setShowContact} />}\n      <input\n        type=\"button\"\n        className=\"btn show-contacts-btn\"\n        value=\"click me\"\n        onClick={() => !showContact && setShowContact(true)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}